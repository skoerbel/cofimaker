 ***************************************************
 * This is cofima, the beta version                *
 ***************************************************
usage: cofima [OPTIONS]

Without further options, cofima reads input from INPUT.COFIMA and writes output to OUTPUT.COFIMA. The cofima documentation tells you how to set up an input file.

cofima options:

  -v, --version     print version information and exit
  -h, --help        print usage information and exit
  -t, --time        print time and exit
  --input file1     read input from file file1
  --output file2    write output to file file2
  --add number1 number 2 
                     adds number 1 to number 2.
  --addatoms file format species nadd outfile coords(1,1:3) ... coords (nadd,1:3)  
                     adds nadd atoms of species species to file file with format format and writes to outfile.
  --angs2bohr numberinangs
                     converts numberinangs to from Angstrom to Bohr.
  --addeqv infile informat symmformat outfile (top)
                     adds atoms to a set of irreducible atoms by applying symmetries read from a file "SYMM.DAT".
                     "infile" with format "informat" contains atom coordinates, "symmformat" indicates if the symmetries in "SYMM.DAT" have the mbpp or gulp format, 
                     and outfile will contain the added atoms
  --angs2hart numberinangs
                     converts numberinangs from Angstrom to Hartree.
  --av file format firststep step laststep
                     calculate averaged lattice parameters
                     and write them to the file AV.DAT.
                     Example: --av myfile cfg 40 20 100
                     if you have myfile40.cfg, myfile60.cfg,
                     ...myfile100.cfg.
  --bandgap infile informat
                     reads the bandgap from infile with formatinformat (supported: nwchem,outcar,outcar_gw).
                     usage: e.g. cofima --bandgap nwchem.out nwchem
  --basis4fiesta ele zetamin zetamax nzeta lmax (rmax "rmax"
                     npoints "npoints")
                     creates an auxiliary basis (el2.ion) to be read by fiesta, where el is an element name, zetamin and 
                     zetamax are the minimum and mmaximum gaussian exponents that are to be taken into account, 
                     nzeta is the number of different exponents, lmax the largest angular momentum. rmax (optional, default20)
                     is the largest radial gridpoint, npoints (optional, default 10000) is the number of radial gridpoints.
                     The ratio of coeffients is constant.
                     E.g.: 
                     cofima --basis4fiesta He 0.8 4.0 8 2 
                     cofima --basis4fiesta He 0.8 4.0 8 2 rmax30.0 npoints 5000
  --bohr2angs numberinbohr
                     converts numberinbohr from Bohr to Angstrom.
  --broaden file x-column value-column periodic period brd (lcontinuous)
                     reads the x values as column "x-column" and the function values from column "value-column" of file "file"
                     and applies a Gaussian broadening by "brd". If "periodic"==T, periodicity with length "period" is accounted for. If lontinuous==T, a continuous distr. is assumed
  --broaden_lin file x-column value-column periodic period brd1 brd2 (lcontinuous)
                     same as --broaden but with a linearly changing width (from brd1 to brd2)
  --broaden_quad file x-column value-column periodic period brd1 brd2 (lcontinuous)
                     same as --broaden_lin but broadening increases quadratically
  --com file format
                    calculates the Center Of Molecule from coordinates in "file" which has format "format".
  --comass file format
                    calculates the center of mass from coordinates in "file" which has format "format".
  --cageZnO nunits
                     creates a cage-like cluster of nunit     s ZnO units.
  --compare file1 file2 
                     calculates overlap <f1|f2> / (|f1|*|f2|) of two fields on a 1d grid, read from file1 and file2. 
                     The grids should be similar, though not necessarily equal. Each line i in file_j should be rgrid_j(i), f_j((i)
  --overlaps file1 file2 
                     calculates overlap <f1|f2> / (|f1|*|f2|) of two fields on a 1d grid, read from file1 and file2. 
                     The grids should be similar, though not necessarily equal. Each line i in file_j should be rgrid_j(i), f_j((i)
  --convert file1 file2 format1 format2 (v11 v12 v13 v21...)
                     convert file1 from format1 to format2
                     and write to file2.
                     Supported formats so far:
                     coorat (MBPP), OUT (MBPP), xsf, gin (GULP), data (LAMMPS), cfg, lxyz (LAMMPS), abinit, nwchem, xyz, (cif)
                    poscar, outcar, siesta, siesta_out, ascii (only format2), poscar_forces, xsf_forces
                    findsym, vesta. If format1=coorat/nwchem/xyz, give lattice vectors v11...v33.
  --coord file format (vecs) (-cutoff cutoff) 
                     determines min, max, av coord. numbers. If the format is one without lattice vectors, supply them.
                     Optionally supply the cutoff bond length (default 3 Angs)
  --corr file species property corrf rcut (binwidth rmax brd) 
                     calculate a correlation function using 
                     an auxiliary property number "property"
                     of the species "species" in a cfg file
                     "file" using a predefined correlation  
                     function "corrf" with cutoff "rcut" and
                     binwidth "binwidth" up to a maximum 
                     distance "rmax" and gaussian broadening
                     by "brd".
                     possible corrf: "theta"
  --create_neb_chain file1 file2 format N (vecs1 vecs2)
                     read file1 and file2, which have format "format", if needed read vectors, read number N of images inbetween
                     create chain of linearly interpolated images
  --cross_product vec1(1:3) vec2(1:3)
                     does the expected.
  --crysanpero 
                     execute the routine "crysanpero".
                     An input file with instructions for crysanpero is required.
                     By default, the program reads "INPUT.CRYSANPERO". A different input file can be specified via the "input" option.
                     To see an example of an input file for crysanpero, type "help crysanpero".
  --cut file1 file2 format1 format2 above/below 1/2/3 cut 
                     (nndist (hdist) -hydr)               
                     remove atoms above/below x/y/z=cuthere
                     and write to file2.
  --cut file1 file2 format1 format2 sphere 0/1 radius x y z
                     remove atoms outside(0)/inside(1) of a
                     sphere at origin x y z
                     A file "HYDR.file2" with hydrogenated 
                     dangling bonds is written if requested.
                     nndist is the maximum broken bondlength
                     which is hydrogenated, hdist is the
                     distance along the former bond at which
                     the H is placed. Defaults: nndist=3.0 
                     Angstrom, hdist=1.25 Angs. If you wish 
                     to specify hdist, you need to specify 
                     nndist first. hdist>0: absolute dist. 
                     in Angs, hdist<0: fraction of former 
                     bondlength.
  --cut file1 file2 format1 format2 plane 0/1 distance n1 n2 n3
                     remove atoms above(0)/below(1) of a planewith distance "distance" from origin and direction (n1,n2,n2)
  --cut file1 file2 format1 format2 dirplane 0/1 distance n1 n2 n3
                     remove atoms above(0)/below(1) of a planewith distance "distance" from origin and direction n1*a + n2*b + n3 * c (a,b,c = direct lattice vectors)
  --cut file1 file2 format1 format2 hklplane 0/1 distance h k l
                     remove atoms above(0)/below(1) of a planewith distance "distance" from origin specified by Miller indices
  --deriv file1 deriv_mode
                     calculates first derivative of second column in file1 wrt the first one using finite differences.
                     "deriv_mode" can be "cd" (central difference), "cd2" (second derivative, central diff.), or fps (5-point-stencil)
  --detmat3 matrix
                     calculate determinant of 3x3 
  --dfh dim point direction 
                     calculates the distance of "point" from the convex hull. The hull facets are read from "HULL_FACETS", they must be line segments in 2d and triangles in 3d.
                     dim is the dimension (2 or 3), and "direction" is the direction along which the distance is required. 
                     If the energy is the z component, use 0 0 1 for "direction".   
  --dipole file format 
                     calculates the dipole moment of a 
                     cluster of point charges.
                     Caution works only for finite systems.
                     Result in eV*Angs.
  --dipen cellvecs dipolevector epsilscalar 
                     calculates dipole-dipole energy of a &lattice of point dipoles.
                     Use Bohrs for lengths!
  --diffatoms file1 file2 format (vecs) (-tol mytol)
                     determines common and different 
                     atoms for two structure files.
                     tolerance mytol for distinction (default 0.01)
  --dist file format 1/2/3 (-bin 0.01) (-broad 0.1)
                     calculate distrib. along x1/x2/x3
                     and apply Gaussian broadening.
                     default: bin=0.01, broad=0.1 (frac).
                     x1 are lattice directions (not necess.
                     cartesian).
                     A file LATTSPAC.DAT containing the 
                     spacings of layers is written as well.
                     Caution: no correct results for
                     non-orthogonal vectors.
  --divide number1 number 2 
                     divides number 1 by number 2.
  --dot_product vec1(1:3) vec2(1:3)
                     does the expected.
  --ecoulomb file format 
                     calculates the electrostatic energy 
                     of a cluster of point charges.
                     Caution works only for finite systems.
                     Result in eV.
  --ekin file1 format (-step step)
                    calculates the kinetic energy of a density read from cube file "file1". Currently "format" must be cube.
                    Only every stepth grid point in file is used (faster). CAUTION: Works only if WF is real. 
                    Default: step=1.
  --ev2hart number
                     converts number from eV to Hartree.
  --ev2ryd number
                     converts number from eV to Rydberg.
  --eV2nm number
                     converts photon energies in eV to light  wavelengths in nm
  --expand
                     expands (shrinks) cell vectors by a factor read from command line. Usage:
                     cofima --expand FILE format OUTFILE format factor 
  --expo_range
                     determines the range of gaussian exponents zeta (range=zetamax-zetamin)
                     from a file which should have the fiesta basis format, e.g. NWCHEM_Ga.ion , He.ion, Cu2.ion etc.
                     usage: cofima --expo_range filename
  --fourier_1d file1 ftmode (-nq integer -qmax float)
                     calculates FT of 2nd column in file1 using ftmode (options: simple). Optional: number of qpoints nq, maximum q qmax
  --fourier_1d_reverse file1 ftmode
                     calculates reverse FT of 2nd column in file1 using ftmode (options: simple)
  --gulpnebana infile 
                     read GULP NEB data from GULP NEB outputfile "infile", such as coordinates and energies of the NEB images
                     and write the structures to "NEBGEO.XSF"  and the energies to "NEBENERGIES.DAT".
                     Deprecated. Use nebana instead.
  --hart2ev number
                     converts number from Hartree to eV.
  --hart2ryd number
                     converts number from Hartree to Rydberg.
  --hcover file1 file2 format
                     reads cluster atom coordinates from "file1" and coordinates of embedding atoms (and cluster atoms)
                     from "file2". Replaces first the embedding atoms (the ones that are in "file2" but not in "file1") by H, then strips off the redundant H.
  --integrate file1
                     calculates integral of second column in file1 wrt the first one
  --invmat3 matrix 
                     inverts 3x3 "matrix".
  --ipol file1 ipolstep ipolmeth 
                     interpolates second column in file1 wrt the first, using ipolmeth=lin,polint,cspline,gauss,
                     rdfi (or fi, or fourier), or qspline, or akima
                     and finegrid=grid/step.
  --isperovskite file format (-cutoff cutoff)
                     check whether file "file" with format "format "format" has perovskite structure.
  --isperovskite_loose file format 
                     check whether file "file" with format "format "format" has perovskite structure. Same as isperovskite, but with looser criteria (more distortion allowed)
  --isperovskite_loose_analyze file format 
                     same as isperovskite_loose, but with additional analysis (polarization, octahedral tilts) and additional option -axes ax11 ax12 ax13 ... ax33 (provide axes for octahedral 
                     rotation, or determine axes automatically from A sublattice (-autoaxes A) or B sublattice (-autoaxes B).
  --kcalpermole floatnumber
                     converts kcal/mole to eV/molecule.
  --latsys file format (tol1 tol2)
                     determine lattice system. Use tolerance  tol1 for cell edges, tol2 for angles (cubic if angles=90+-tol2)
  --lmpthermo filename
                     read MD data from LAMMPS logfile and
                     write them to "MD.DAT".
  --locpotav filename (direction avlength)
                     average vasp potential file "filename"
                     (usually LOCPOT) along direction "direction". avlength is the length for the macroscopic average. Ex.:
                     cofima --locpot LOCPOT 2 0.5
  --matchatoms file1 format1 file2 format2 outfile format3
                     reorders atoms in file2 such that their positions match best those in file1
  --madeldipen lattice charge dipole epsil alat
                     calculates Madelung energy for some lattices of point charges +- q in a homogeneous background charge.
                     lattice is one of (cub,tet,fcc,bcc). In the case of tet, give a and c, else a is enough. Like madelen1,but
                     a dipole basis (like NaCl).
                      Use Bohrs for lengths!
  --madelen1 cellvecs charge epsilontensor 
                     calculates the screened Madelung energy of a lattice of point charges with Z=1 in a dielectric medium with a compensating homogeneous background charge.
                     Formula from Rurali & Cartoixa, Nano Lett. 9, 975 (2009); Murphy & Hine, PRB 87, 094111 (2013).
                     Use Bohrs for lengths!
  --madelen file format epsilontensor 
                     calculates the screened Madelung energy of a lattice of point charges Z_i in a dielectric medium with a homogeneous compensating background charge.
                     Formula from Richargd Martin, Eq. F.5
  --mateigs n matrix  
                     calculates eigenvalues of nxn matrix.
  --mat_times_vec matrix(1:3,1:3) vec(1:3) 
                     calculates matriy times vector.
  --matrix_mult n matrix1 matrix2  
                     calculates matrix3=matrix1*matrix2 (nxn matrices only).
  --mbppnebana mbppout nimg 
                     writes NEB data from an MBPP NEB run     performed using Bernd Meyer's NEB scripts.
                     "mbppout" is the name of the MBPP OUT file to read from.
                     For example, "cofima --mbppnebana OUT.5 8reads structures and energies from the files "img0/OUT.5" to "img8/OUT.5".
                     "nimg" is the number of the final NEB image. The routine writes the image structures t                     o "NEBGEO.XSF" and the energies to "NEBENERGIES.DAT".
                     However, the above is still to be implemented. At the moment the routine reads energies from "ETOT" and    structures from "GEOMETRY.xsf".
                     Deprecated. Use nebana instead.
  --matrix infile outfile format m11 m12 ... m33
                     multiply all coordinates with a matrix
  --mdana trjfile format (GULPresfile)
                     (-bndry 0.09 0.08 0.07)
                     analyze trajectory file "file" with 
                     format "format".
                     Supported input formats so far:
                     trg (GULP), HISTORY (DL_POLY).
                     "GULPresfile" is only needed for GULP 
                     trajectory files because they do not
                     contain the atomic names.
                     "GULPresfile" stands for the name of
                     the GULP restart file.
                     Output will be written to
                     "MD.DAT".
                     "-bdry" changes the default for the
                     "cell region that is treated as the 
                     "cell boundary when calculating the
                     "electric polarization.
                     "Only matters in charged cells.
                     If a GULP output file from MD named
                     "GOUT" exists, cofima extracts data 
                     and writes them to GULPMDOUT.DAT
                     and GULPMDAV.DAT.
  --merge file1 format1 file2 format2 outfile outfileformat
                     merge structure file1 with file 2 and write result to file3.
  --mult n1 n2 n3 file1 file2 format1 format2 
                     create a n1xn2xn3 supercell.
  --multiply number1 number 2 
                     multiplies number 1 by number 2.
  --nebana infile informat 
                     read NEB data from NEB outputfile "infile". Formats supported so far are gulp (gin) only.
                     These are written to "NEBGEO.XSF" and to "NEBENERGIES.DAT", respectively.
  --nebchain infile informat outformat nimg
                     read chain of structure files and generate a NEB input file.
                     Example: cofima --nebchain GEO xsf gulp 5
                     reads GEO0.xsf to GEO5.xsf and writes them to the gulp input file "CHAIN.GIN". Supported outformat: (gin).
  --nicecluster file format radius coordmin coordmean dipolemax species1 n1 species2 n2...
                     reads bulk file "file" with format "format"
                     and builds cluster with maximum radius
                     "radius" in Angstrom, which contains n1
                     atoms of element "species1" and so on.
                     If radius<0, it is assumed that the
                     provided structure file is already 
                     that of a sphere or another finite 
                     piece of bulk.
                     Cluster geometries are printed if the 
                     minimum coordination number is at least
                     "coordmin" (integer), the averaged 
                     coordination number is at least "coordmean"
                     and the dipole moment (e*Angs) is not
                     larger than "dipolemax"
                     Ex.: cofima --nicecluster bulk.xsf xsf 5.0 2 3.0 6.0 Cu 2 Zn 1 Sn 1 Se 4
  --nicecluster2 (-test) -file file -format format -radius0 radius0 -radius radius -origin x y z-coordmin coordmin -coordmean coordmean -dipmax dipolemax -atoms species1 n1 species2 n2...
                     The same as nicecluster except for an inner sphere of radius radius0 that is fixed. "test" is optional and causes the routine to stop after the number of configurations has  been calculated.
  --nm2eV number
                     converts light wavelengths in nm to photon energies in eV
  --overlap file_wf1 file_wf2 file_smat
                     calculates the overlap between two sets of wavefunctions wf1 and wf2, whose coefficient wrt a Gaussian
                     basis are in the files file_wf1/2, and where the overlap matrix is in file_smat.
                     Overlaps are written to overlaps.dat
  --overlapwf file_wf1 file_wf2 file_smat
                     calculates the overlap between two sets of wavefunctions wf1 and wf2, whose coefficient wrt a Gaussian
                     basis are in the files file_wf1/2, and where the overlap matrix is in file_smat.
                     Overlaps are written to overlaps.dat
  --phonopy_print_bands infile outfile 
                     reads phonon band structure from specified file (e.g. band.yaml) and prints phonon eigenvalues
 and if present the eigenvectors to specified outputfile
  --phonopy_print_eigenvecs infile outfile (-qpoint 7 -band 5 )
                     reads phonon band structure from specified file (e.g. band.yaml) and prints phonon eigenvectors
 of qpoint 7, band 5 to specified outputfile
  --pol file format 
                     calculate polarization using from positions and charges as given in the geometry file
  --pol_vol ndim
                     calculates polyhedral volume. Polyhedron facets are read from file "HUlL_FACETS" (see quickhull).
  --power number1 number 2 
                     result: number1**number2.
  --quickhull filename dimension
                     determine the convex hull of a set of points in "dimension" dimensions using the algorithm of Barber, Barber, Dobkin, Huhdanpaa, 
ACM Transactions on Mathematical software 22 no 4, 469-483, 1996
  --randisp infile informat outfile outformat maxdisp(1:3) 
                     apply random displacements to atom positions. Maxdisp >= 0 : fractional, <0: absolute maximal displacements.
  --rdf filename format (vecs) rmax binwidth broad
                     calculate radial distribution functions
                     of atoms in file "filename" with format
                     "format". Output is written to "RDF.DAT". If the format contains no vectors, supply them after the format.
  --read_symops_vasp
                     read symmetry operations from vasp OUTCAR and transform into matrix-translation format
  --readxcme filename format 
                     read xc matrix elements from "infile" 
                     which has format "informat"
                     (currently only nwchem is supported) 
  --relax_atoms inputfile format outputfile format step
                     read structure and forces from inputfile, relax atoms by forces multiplied by step. Formats: poscar_forces, xsf_forces
  --relax_rigid_molecule inputfile format outputfile format step
                     read structure and forces from inputfile, translate atoms rigidly by sum of forces multiplied by step and
                     rotate rigidly by sum of torques * step
  --relax_rigid_molecule_rot inputfile format outputfile format step
                     read structure and forces from inputfile, rotate molecule rigidly by sum of torques * step
  --relax_rigid_molecule_rot2 inputfile format outputfile format step
                     read structure and forces from inputfile, rotate molecule rigidly by sum of torques * step. Same as 
                     relax_rigid_molecule_rot, but different averageing
  --relax_rigid_molecule_trala inputfile format outputfile format step
                     read structure and forces from inputfile, translate atoms rigidly by sum of forces multiplied by step
  --relax_rigid_molecule_breath inputfile format outputfile fomat step
                     read structure and forces from inputfile, translat end or shrink molecule rigidly by average radial force
  --replace filename format species nreplace newspecies outfile
                     read coordinates from file "filename,"
                     replace nreplace "species" atoms by "
                     "newspecies" atoms and write "
                     resulting structure to "outfile".
                     "The atoms that were replaced are
                     written to "REPLACED.DAT".
                     If nreplace<0, atom no. -nreplace will 
                     be replaced.
  --rmeqv infile format symformat outfile
                     read coordinates from file "infile"
                     which has format "informat", read 
                     number of symmetry operations and
                     symmetry operations from "SYMM.DAT",
                     and write irred. atoms to "outfile". 
                     Reduc. atoms are written to "REDUCIBLE"  ,
                     "symmformat" can be "mbpp" or "gulp".
  --rotate infile outfile format iaxis angle
                     rotate around cartesian axis "iaxis" by
                     angle (in degree). iaxis=1 or 2 or 3.
                     If iaxis=0, read arbitrary axis.
                     example: cofima --rotate POSCAR.in POSCAR.out poscar 1 60
                     or cofima --rotate POSCAR.in POSCAR.out poscar 0 1.0 1.0 0.0 60.0
  --rotate_matrix dimension matrix rotationmatrix (row-wise)
  --ryd2ev number
                     converts number from Rydberg to eV.
  --ryd2hart number
                     converts number from Rydberg to Hartree.
  --silent
                     the program still talks, but less.
  --slidwinav infile windowlength ncolumns icolumn
                     averages data in column icolumn accordingover a window of windowlength*(length of x interval infile). File "infile" has ncolumns data columns.
  --sortdata infile ncolumns ncolumn
                     sorts data in column ncolumn according to size. File "infile" has ncolumns data columns.
  --spectrum infile informat (-brd broadening -bin binwidth)
                     extracts excitation energies from NWCHEM, abinit or fiesta_bse file and writes them to SPECTRUM.DAT.
                     broadening and binwidth are optional since they have default values (0.05 eV and 0.01).
  --traj file format firststep step laststep species number nndist (-nnana nnana nnatom)
                     calculate trajectory of the atom number
                     "number" of species "species" from a
                     series of coordinate files.
                     Example: --traj myfile cfg 40 20 100 Li 10 2.9
                     if you have myfile40.cfg, myfile60.cfg,
                     ...myfile100.cfg. and want the 
                     trajectory of the 10th Li atom.
                     nndist is the maximum distance of NN
                     for calculating the coordination number.
                     nnana (=octet) is optional. If "-nnana" is given, nnatom is the NN species that is to be analyzed.
  --transform trans transoptions infile outfile informat
                     apply transformation "trans" with options "transoptions" to                                                coordinates in "filein" with format "informat". Fur further help   type "cofima --help transform".
  --vacs filename format species nvac outfile
                     read coordinates from file "filename,"
                     create nvac "species" vacancies and"
                     write remaining coordinates to"
                     "outfile. The atoms that were removed "
                     are written to "VACS.DAT".
                     If nvac<0, remove the nvacth atom of that species.
  --vasp_bs (-lattice lattice -nskip nskip)
                     get band structure from EIGENVAL. Optional: specifiy lattice (to get special kpoints right) and number of kpoints to skip.
  --vasp_bs_pr 
                     get projected band structure from PROCAR
  --vasp_CHG_cut_sphere -file file -origin origin -radius radius
                     read charge density file "file" output by VASP, write density inside and outside to files. "origin" must be three fractional numbers, "radius" the radius in Angs
  --vasp_CHG_overlap file1 file2
                     read two charge densities from file1 and file2 (CHGCAR format) and calculate their 3D overlap integral. Writes also file CD_abs_diff.vasp with |charge difference|.
  --vasp_CHG_lin_comb file1 file2 fac1 fac2
                     read two charge densities from file1 and file2 (CHGCAR format) and calculate their linear combination fac1 * CHG1 + fac2 * CHG2, which is written to CHG_LIN_COMB.vasp.
  --vasp_dos_pr (-layers nlayers -direction idir -origin origin -dos_tol)
                     get projected DOS from DOSCAR and OUTCAR with optional parameters for layer properties. dos_tol for band 
                     edge detection, default 1E-4
  --vasp_get_BSE_EV_xml
                     read BSE eigenvalues and oscillator strengths from vasprun.xml
  --vasp_get_eps_vs_omega (-rotate rotation matrix)
                     get frequency-dependent dielectric matrix from OUTCAR and write to EPS1/2.DAT. Optional: rotate epsilon
                     to epsrot = S⁺ eps S
  --vasp_get_eps_vs_omega_from_chi (-rotate rotation matrix)
                     get frequency-dependent dielectric matrix from OUTCAR and write to EPS1/2.DAT. Optional: rotate epsilon
                     to epsrot = S⁺ eps S. Same as --vasp_geeps_vs_omega but now from ALGO=CHI, w and w/o local field effects
  --vasp_get_eps_vs_omega_from_chi_flip_ndiag (-rotate rotation matrix)
                     same as vasp_get_eps_vs_omega_from_chi, but with the nondiagonal elements of epsilon-with-LFE multiplied by -1 
  --vasp_get_eps_vs_omega_xml (rotation matrix)
                     get frequency-dependent dielectric matrix from vasp.xml and write to EPS1/2.DAT. Optional: rotate epsilon
                     to epsrot = S⁺ eps S
  --vasp_get_pol 
                     get ferroelectric polarization from a Berry phase calculation with vasp (LCALCPOL). Needs the OUTCAR file
  --vasp_plot_CHG (-avdir 1/2/3 -cutdir 1/2/3 -cutpos pos -file file)
                     get CHG from VASP charge file "file" and write to gnuplottable file CHG4PLOTTING.
                     defaults: average along a1 cell vector, cut along a1 at fractional cut position 0.0, file=CHGCAR
  --vasp_dE_dk n (-cutdir 1/2/3 -cutpos 0.123)
                     prints a file VASP_E_and_dE_dK_n with the energy eigenvalues and energy gradients in k-space for the nth band.
                     Needs as input parameter the band index n, and the files EIGENVAL, OUTCAR need to be present.
                     Another file is written with the energy and energy gradient on a k plane. Defaults: plane at k1=0 (cutdir=1, cutpos=0).
                     This file can be plotted with the splot command in gnuplot
  --vasp_eps2_from_WAVEDER (-nomega nomega -omegamin omegamin -omegamax omegamax -broad broadening -vbands nvbands vbands -cbands ncbands cbands -spins nspins spins -vbandrange firstband lastband -cbandrange firstband lastband -kpoints ... -smearing ...)
                     reads WAVEDER, EIGENVAL and OUTCAR files                          and calculates epsilon2. Optionally specify number of frequencies, 
                     min and max frequency, number of valence bands, conduction bands, and spins and a vector of the requested bands and spins, range of valence or conduction bands. 
                     Example: -nomega 1001 -omegamax 0.0 -omegamin 10.0 -broad 0.025 -vbands 4  1 2 3 4 -cbands 4  5 6 7 8 -spins 1  2
 
                     WARNING: only use without symmetries (ISYM=0 or spacegroup #1 / P1 / C_1).
                     smearing=fermi or gaussian
  --vasp_eps2_from_WAVEDER_LEH (-nomega nomega -omegamin omegamin -omegamax omegamax -broad broadening -vbands nvbands vbands -cbands ncbands cbands -spins nspins spins -vbandrange firstband lastband -cbandrange firstband lastband -kpoints ... -smearing ...)
                     -efermi_e efermi_e -efermi_h efermi_h
                     reads WAVEDER, EIGENVAL and OUTCAR files                          and calculates epsilon2. Optionally specify number of frequencies, 
                     min and max frequency, number of valence bands, conduction bands, and spins and a vector of the requested bands and spins, range of valence or conduction bands. 
                     Example: -nomega 1001 -omegamax 0.0 -omegamin 10.0 -broad 0.025 -vbands 4  1 2 3 4 -cbands 4  5 6 7 8 -spins 1  2
 
                     WARNING: only use without symmetries (ISYM=0 or spacegroup #1 / P1 / C_1).
                     smearing=fermi or gaussian
  --vasp_kaux KPOINTfile disp1 disp2 disp3
                     reads kpoints from KPOINTSfile and prints a file KPOINTS.AUX with the original kpoints plus 6 auxiliary 
                     kpoints shifted by +- disp1 in the cartesian x direction, +- disp2 in y direction, etc. If OUTCAR is not
                     present, reciprocal lattice vectors cannot be read, and fractional shifts are used.
  --vasp_kgrid n1 n2 n3 (-shift s1 s2 s3 )
                     prints a file KPOINTS.GRID with a Gamma-centered (default) or shifted (if specified) Monkhorst-Pack k grid with n1 x n2 x n3 kpoints
  --vasp_kpath npoints startk(1:3) endk(1:3)
                     prints a file KPOINTS.PATH containing a path from startk to endk. The path has in total npoints+1 points 
                     (including startk and endk).
  --vasp_read_WAVEDER 
                     print content of WAVEDER to formatted file WAVEDER.dat
  --vasp_write_WAVEDER_ext 
                     reads binary WAVEDER file and prints dipole ME and eigenvalues to formatted file WAVEDER_EXTENDED.dat
  --WAVECAR_ana 
                     reads binary WAVECAR file header
  --vasp_write_BORN (-natoms 2 -atoms 1 5)
                     reads dielectric tensor and Born effective charges from OUTCAR file and writes them to file BORN
                     (used by phonopy). Optional: print only BEC for atoms 1 and 5
  --xcoulomb file1 file2 format (-step step -finestep finestep -rmin rmin)
                    calculates the classical Coulomb energy of an exciton from wave functions read from cube file1(e) and file2(h). Currently format must be cube.
                    Only every stepth grid point in file is used (faster). finestep is number of fine mesh points per coarse point near r=0 where Coulomb diverges.
                    rmin is radius below which fine grid is used. Default: step=4, finestep=2, rmin~=grid spacing.
